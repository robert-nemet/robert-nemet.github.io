<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>basics on DevCube</title>
    <link>https://rnemet.dev/tags/basics/</link>
    <description>Recent content in basics on DevCube</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Feb 2022 20:04:19 +0100</lastBuildDate><atom:link href="https://rnemet.dev/tags/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker-Compose: How To Rebuild Working Application</title>
      <link>https://rnemet.dev/posts/docker/compose-rebuild/</link>
      <pubDate>Wed, 02 Feb 2022 20:04:19 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-rebuild/</guid>
      <description>While developing application and using docker-compose one question quickly arise:
How to properly rebuild application?
Once an image is built new one will not be built with the same tag as long it exists in a local cache. The compose builds an image it names it with the pattern &amp;lt;context&amp;gt;_&amp;lt;service_name&amp;gt;:latest.
Where:
 Context is directory name where compose YAML is Service is service name in compose YAML file  This means that you can stop or takedown the compose application, next time you run it your images will not be rebuilt if they already exist.</description>
    </item>
    
    <item>
      <title>Docker-Compose: What Every Developer Needs To Know</title>
      <link>https://rnemet.dev/posts/docker/compose-app/</link>
      <pubDate>Wed, 26 Jan 2022 22:12:24 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-app/</guid>
      <description>If you are developing microservices, docker-compose(compose), can be a very powerful tool. Think of a case with an API service and database. Creating and maintaining a database with the use of the Liquibase.
Initial plan &amp;hellip;would be:
 start DB run the Liquibase to make changes start an app  Adding docker-compose as a driver to utilize this process:
var config = { startOnLoad:true, theme:&#39;neutral&#39;, align:&#39;left&#39; }; mermaid.initialize(config);  sequenceDiagram autonumber Docker -- PostgresDB: start PostgresDB -- PostgresDB: wait to finish start PostgresDB -- Docker: done Docker -- LiquibasePG: start LiquibasePGDB -- PostgresDB: execute changeLog LiquibasePGDB -- Docker: done Docker -- Echo: start  PostgresDB Setup This is the simplest step.</description>
    </item>
    
    <item>
      <title>Docker-Compose: Intro</title>
      <link>https://rnemet.dev/posts/docker/compose-intro/</link>
      <pubDate>Sat, 08 Jan 2022 13:42:10 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-intro/</guid>
      <description>Working with containers is a necessity today for developers. You will likely need to work with some kind of storage or interact with some external service, like Solr or Postgres.
You can install the required service on your local machine, which comes with the burden of choosing the correct installation, configuration, etc&amp;hellip; Nothing too complicated but takes time.
Docker and Containers In short, the container is an isolated process on the host machine.</description>
    </item>
    
  </channel>
</rss>
