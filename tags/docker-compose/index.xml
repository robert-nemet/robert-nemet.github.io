<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker-compose on DevCube</title>
    <link>https://rnemet.dev/tags/docker-compose/</link>
    <description>Recent content in docker-compose on DevCube</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 01 Apr 2023 11:32:11 +0200</lastBuildDate><atom:link href="https://rnemet.dev/tags/docker-compose/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Create a Local Development Environment with Docker Compose</title>
      <link>https://rnemet.dev/posts/docker/local_development_environment/</link>
      <pubDate>Sat, 01 Apr 2023 11:32:11 +0200</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/local_development_environment/</guid>
      <description>How to Create a Local Development Environment with Docker
As a developer, when working on a service, you face a problem with the working environment. And when I say working environment, I do not think about IDEs, stacks, OS, libraries, etc. Iâ€™m thinking about the environment where our services live.
These days, our services are usually packed inside some container and put in some kind of distributed system. Most containers and other moving parts are controlled by Kubernetes, Nomad, and similar orchestration systems.</description>
    </item>
    
    <item>
      <title>Docker-Compose: How To Rebuild Working Application</title>
      <link>https://rnemet.dev/posts/docker/compose-rebuild/</link>
      <pubDate>Wed, 02 Feb 2022 20:04:19 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-rebuild/</guid>
      <description>While developing application and using docker-compose one question quickly arise:
How to properly rebuild application?
Once an image is built new one will not be built with the same tag as long it exists in a local cache. The compose builds an image it names it with the pattern &amp;lt;context&amp;gt;_&amp;lt;service_name&amp;gt;:latest.
Where:
Context is directory name where compose YAML is Service is service name in compose YAML file This means that you can stop or takedown the compose application, next time you run it your images will not be rebuilt if they already exist.</description>
    </item>
    
    <item>
      <title>Docker-Compose: What Every Developer Needs To Know</title>
      <link>https://rnemet.dev/posts/docker/compose-app/</link>
      <pubDate>Wed, 26 Jan 2022 22:12:24 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-app/</guid>
      <description>If you are developing microservices, docker-compose(compose), can be a very powerful tool. Think of a case with an API service and database. Creating and maintaining a database with the use of the Liquibase.
Initial plan &amp;hellip;would be:
start DB run the Liquibase to make changes start an app Adding docker-compose as a driver to utilize this process:
sequenceDiagram autonumber Docker --&gt;&gt; PostgresDB: start PostgresDB --&gt;&gt; PostgresDB: wait to finish start PostgresDB --&gt;&gt; Docker: done Docker --&gt;&gt; LiquibasePG: start LiquibasePGDB --&gt;&gt; PostgresDB: execute changeLog LiquibasePGDB --&gt;&gt; Docker: done Docker --&gt;&gt; Echo: start PostgresDB Setup This is the simplest step.</description>
    </item>
    
    <item>
      <title>Docker-Compose: Intro</title>
      <link>https://rnemet.dev/posts/docker/compose-intro/</link>
      <pubDate>Sat, 08 Jan 2022 13:42:10 +0100</pubDate>
      
      <guid>https://rnemet.dev/posts/docker/compose-intro/</guid>
      <description>Working with containers is a necessity today for developers. You will likely need to work with some kind of storage or interact with some external service, like Solr or Postgres.
You can install the required service on your local machine, which comes with the burden of choosing the correct installation, configuration, etc&amp;hellip; Nothing too complicated but takes time.
Docker and Containers In short, the container is an isolated process on the host machine.</description>
    </item>
    
  </channel>
</rss>
